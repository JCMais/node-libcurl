name: build-and-release

defaults:
  run:
    shell: bash

on:
  push:
    tags:
      - '*'
    branches:
      - master
      - develop
  workflow_dispatch:
    inputs:
      publish-binary:
        type: boolean
        default: false
        description: Force publish binary?
        required: true

env:
  LATEST_LIBCURL_RELEASE: 7.86.0
  OLDEST_LIBCURL_RELEASE: 7.77.0
  NODE_LIBCURL_CPP_STD: c++20
  # https://www.electronjs.org/docs/latest/tutorial/installation#cache
  electron_config_cache: ~/.cache/electron
  NODE_LIBCURL_GITHUB_TOKEN: ${{ secrets.NODE_LIBCURL_GITHUB_TOKEN }}

concurrency:
  group: build-and-release-${{ github.ref_name }}
  cancel-in-progress: true

# all jobs here must have a matrix identical to the ones inside build-and-release.yaml

jobs:
  set-params:
    runs-on: ubuntu-22.04
    outputs:
      latest-libcurl-release: ${{ env.LATEST_LIBCURL_RELEASE }}
      oldest-libcurl-release: ${{ env.OLDEST_LIBCURL_RELEASE }}
    steps:
      - run: exit 0

  lint-and-tsc:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      # Node.js / PNPM
      - uses: pnpm/action-setup@v4
      - name: Set up Node ${{ matrix.node }}
        uses: actions/setup-node@v5
        with:
          node-version: '${{ matrix.node }}'
          cache: 'pnpm'
          package-manager-cache: 'pnpm'

      - name: Install node dependencies
        run: pnpm install --frozen-lockfile --ignore-scripts
      - name: Run lint
        run: pnpm lint
      - name: Run tsc
        run: pnpm build:dist

  build-and-release:
    permissions:
      id-token: write
      attestations: write
      contents: write
      packages: write
    runs-on: ${{ matrix.os == 'alpine' && 'ubuntu-22.04' || matrix.os }}
    container: ${{ matrix.os == 'alpine' && format('node:{0}-alpine3.21', matrix.node) || '' }}
    needs:
      - set-params
      - lint-and-tsc

    strategy:
      fail-fast: false
      matrix:
        electron-version:
          - ''
        os:
          - macos-15
          - ubuntu-22.04
          # - ubuntu-24.04-arm
          - alpine
          - windows-2025
        libcurl-release:
          - ${{ needs.set-params.outputs.latest-libcurl-release }}
        node:
          - 24
          - 22
        include:
          # electron builds
          - os: ubuntu-22.04
            libcurl-release: ${{ needs.set-params.outputs.latest-libcurl-release }}
            node: 24
            electron-version: 38.1.2
          - os: macos-15
            libcurl-release: ${{ needs.set-params.outputs.latest-libcurl-release }}
            node: 24
            electron-version: 38.1.2
    env:
      LIBCURL_RELEASE: ${{ matrix.libcurl-release }}
      LATEST_LIBCURL_RELEASE: ${{ matrix.libcurl-release }}
      ELECTRON_VERSION: ${{ matrix.electron-version }}
    steps:
      - name: Should publish binary?
        id: should-publish
        run: |
          if [ "${{ inputs.publish-binary }}" = "true" ] || [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "result=true" >> "$GITHUB_OUTPUT"
          else
            echo "result=false" >> "$GITHUB_OUTPUT"
          fi
      - if: matrix.os == 'alpine'
        name: Install Alpine Packages
        shell: sh
        run: |
          apk --no-cache add --virtual .rundeps \
          bash ca-certificates cmake curl docker git \
          gnupg openssh-client openssl parallel pkgconfig \
          coreutils \
          python3 py3-pip make g++ \
          perl linux-headers \
          autoconf automake libtool \
          texinfo flex bison build-base libedit-dev mandoc-soelim

      - if: runner.os == 'macOS'
        name: Install Needed packages on macOS
        run: brew install coreutils wget automake libtool cmake gnu-sed m4 groff

      - if: runner.os == 'Linux' && matrix.os != 'alpine'
        name: Install Needed packages on Linux
        run: sudo apt-get update && sudo apt-get install -y cmake groff

      - name: Export Electron npm_config envs
        if: matrix.electron-version
        run: |
          echo "npm_config_runtime=electron" >> $GITHUB_ENV
          echo "npm_config_dist_url=https://electronjs.org/headers" >> $GITHUB_ENV
          echo "npm_config_target=${{ matrix.electron-version }}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v5

      # see https://github.com/nodejs/node/issues/40537
      - name: Enforce IPv4 Connectivity
        if: matrix.os != 'alpine'
        uses: ./.github/actions/force-ipv4

        # PNPM / Node.js
      - name: Setup PNPM
        uses: pnpm/action-setup@v4
      - name: Set up Node ${{ matrix.node }}
        if: matrix.os != 'alpine'
        uses: actions/setup-node@v5
        with:
          node-version: '${{ matrix.node }}'
          cache: 'pnpm'
          package-manager-cache: true

      - name: Libcurl Deps Cache (Restore)
        uses: actions/cache/restore@v4
        id: libcurl-deps-cache
        if: runner.os != 'Windows'
        with:
          path: |
            ~/.node-gyp
            ~/deps
          key: v4-${{ matrix.os }}-libcurl-deps-cache-${{ matrix.electron-version && 'electron' || 'node' }}-${{ matrix.electron-version || matrix.node }}
          restore-keys: |
            v4-${{ matrix.os }}-libcurl-deps-cache-${{ matrix.electron-version && 'electron' || 'node' }}-${{ matrix.electron-version || matrix.node }}

      - name: Restore Electron Cache
        uses: actions/cache@v4
        if: matrix.electron-version && runner.os != 'Windows'
        with:
          path: ${{ env.electron_config_cache }}
          key: v1-${{ matrix.os }}-electron-cache-${{ matrix.electron-version }}
          restore-keys: |
            v1-${{ matrix.os }}-electron-cache-${{ matrix.electron-version }}
            v1-${{ matrix.os }}-electron-cache-

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: matrix.enable-debugging

      - name: 'Build and Package Binary'
        if: runner.os != 'Windows'
        env:
          # this is false because we publish as a separate step
          PUBLISH_BINARY: false
          GIT_COMMIT: ${{ github.sha }}
          GIT_REF_NAME: ${{ github.ref_name }}
        run: ./scripts/ci/build.sh

      - name: 'Check if fully installed and built'
        id: built-and-installed
        if: runner.os != 'Windows'
        run: |
          if [[ -f built-and-installed.hidden.txt ]]; then
            echo "status=true" >> $GITHUB_OUTPUT
          else
            echo "status=false" >> $GITHUB_OUTPUT
          fi

      - name: Libcurl Deps Cache (Save)
        uses: actions/cache/save@v4
        if: runner.os != 'Windows' && steps.libcurl-deps-cache.outputs.cache-hit == 'false' && steps.built-and-installed.outputs.status == 'true'
        with:
          path: |
            ~/.node-gyp
            ~/deps
          key: v4-${{ matrix.os }}-libcurl-deps-cache-${{ matrix.electron-version && 'electron' || 'node' }}-${{ matrix.electron-version || matrix.node }}

      - name: 'Build and Package Binary Windows'
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          # this is false because we publish as a separate step
          PUBLISH_BINARY: false
          GIT_COMMIT: ${{ github.sha }}
          GIT_REF_NAME: ${{ github.ref_name }}
        run: ./scripts/ci/windows/build.ps1

      - name: Create attestations
        uses: actions/attest-build-provenance@v3
        if: steps.should-publish.outputs.result == 'true'
        with:
          subject-path: 'build/**/node_libcurl-*.tar.gz'

      - name: 'Publish Binary [macos arm64]'
        if: runner.os == 'macOS' && steps.should-publish.outputs.result == 'true'
        env:
          npm_config_target_arch: arm64
        run: |
          node scripts/module-packaging.js --publish "$(pnpm --silent pregyp reveal staged_tarball --silent)"

      - name: 'Publish Binary [macos x64]'
        if: runner.os == 'macOS' && steps.should-publish.outputs.result == 'true'
        env:
          npm_config_target_arch: x64
        run: |
          node scripts/module-packaging.js --publish "$(pnpm --silent pregyp reveal staged_tarball --silent)"

      - name: 'Publish Binary [non macos]'
        if: runner.os != 'macOS' && steps.should-publish.outputs.result == 'true'
        run: |
          node scripts/module-packaging.js --publish "$(pnpm --silent pregyp reveal staged_tarball --silent)"

      - name: Upload artifacts
        if: always() && runner.os != 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.os }}-${{ matrix.libcurl-release }}-${{ matrix.electron-version && 'electron' || 'node' }}-${{ matrix.electron-version || matrix.node }}
          path: ./logs/
          retention-days: 3
