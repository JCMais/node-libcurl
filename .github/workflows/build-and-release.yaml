## GitHub Actions is used to build:
## - Electron (macOs)
## - Nwjs (macOs)
## - Node.js (macOs, linux)

name: build-and-release

on:
  push:
    tags:
      - '*'
    branches:
      - master
      - develop

env:
  NODE_LIBCURL_GITHUB_TOKEN: ${{ secrets.NODE_LIBCURL_GITHUB_TOKEN }}

# all jobs here must have a matrix identical to the ones inside build-lint-test.yaml

jobs:
  build-and-release-nodejs:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-11
          - ubuntu-16.04 # TODO(jonathan): bump this to a more recent version when we do a major version bump
        libcurl-release:
          - 7.73.0
        node:
          - 10
          - 12
          - 14
          - 16
        include:
          - os: macos-11
            libcurl-release: 7.73.0
            node: 16
            node-libcurl-cpp-std: c++17
          - os: ubuntu-16.04
            libcurl-release: 7.73.0
            node: 16
            node-libcurl-cpp-std: c++17
    env:
      LIBCURL_RELEASE: ${{ matrix.libcurl-release }}
      LATEST_LIBCURL_RELEASE: ${{ matrix.libcurl-release }}
      NODE_LIBCURL_CPP_STD: c++11
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - run: echo "NODE_LIBCURL_CPP_STD=${{ matrix.node-libcurl-cpp-std }}" >> $GITHUB_ENV
        if: matrix.node-libcurl-cpp-std
      - if: runner.os == 'macOS'
        name: Install Needed packages on macOS
        run: brew install coreutils wget automake libtool cmake gnu-sed m4
      # not using brew for that one as we need 2.69
      - if: runner.os == 'macOS'
        name: Install autoconf
        run: |
          curl -O -L http://ftpmirror.gnu.org/autoconf/autoconf-2.69.tar.gz
          tar -xzf autoconf-2.69.tar.gz
          cd autoconf-*
          ./configure
          make
          make install
          autoconf --version
          ln -s /usr/local/bin/glibtoolize /usr/local/bin/libtoolize
      - if: runner.os == 'Linux'
        name: Install Needed packages on Linux
        run: sudo apt-get install -y cmake
      - name: Output yarn cache dir
        id: yarn-cache-dir
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Restore Yarn Cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir.outputs.dir }}
          key: v1-${{ runner.os }}-yarn-cache-${{ github.ref }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-${{ runner.os }}-yarn-cache-${{ github.ref }}-
            v1-${{ runner.os }}-yarn-cache-
      - name: Restore libcurl deps cache
        uses: actions/cache@v2
        id: libcurl-deps-cache
        with:
          path: |
            ~/.node-gyp
            ~/deps
          key: v4-${{ runner.os }}-libcurl-deps-cache-node-${{ matrix.node }}
          restore-keys: |
            v4-${{ runner.os }}-libcurl-deps-cache-node-${{ matrix.node }}
      - name: 'Set GIT_TAG'
        if: startsWith(github.ref, 'refs/tags')
        run: echo "GIT_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: 'Publish Binary'
        run: |
          GIT_COMMIT=${{ github.sha }} GIT_TAG=$GIT_TAG ./scripts/ci/build.sh
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: build-logs
          path: ./logs/
          retention-days: 5

  build-and-release-electron:
    runs-on: macos-11
    strategy:
      fail-fast: false
      matrix:
        libcurl-release:
          - 7.73.0
        node:
          - 16
        electron-version:
          - 12.0.0
          - 11.2.3
          - 10.1.0
          - 9.3.3
          - 8.5.3
        include:
          - libcurl-release: 7.73.0
            node: 16
            electron-version: 12.0.0
            node-libcurl-cpp-std: c++17
          - libcurl-release: 7.73.0
            node: 16
            electron-version: 11.2.3
            node-libcurl-cpp-std: c++17
    env:
      LIBCURL_RELEASE: ${{ matrix.libcurl-release }}
      LATEST_LIBCURL_RELEASE: ${{ matrix.libcurl-release }}
      ELECTRON_VERSION: ${{ matrix.electron-version }}
      NODE_LIBCURL_CPP_STD: c++11
    steps:
      - run: echo "NODE_LIBCURL_CPP_STD=${{ matrix.node-libcurl-cpp-std }}" >> $GITHUB_ENV
        if: matrix.node-libcurl-cpp-std
      - name: Checkout
        uses: actions/checkout@main
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - name: Install Needed packages
        run: brew install coreutils wget automake libtool cmake gnu-sed m4
      # not using brew for that one as we need 2.69
      - name: Install autoconf
        run: |
          curl -O -L http://ftpmirror.gnu.org/autoconf/autoconf-2.69.tar.gz
          tar -xzf autoconf-2.69.tar.gz
          cd autoconf-*
          ./configure
          make
          make install
          autoconf --version
          ln -s /usr/local/bin/glibtoolize /usr/local/bin/libtoolize
      - name: Output yarn cache dir
        id: yarn-cache-dir
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Restore Yarn Cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir.outputs.dir }}
          key: v1-${{ runner.os }}-yarn-cache-${{ github.ref }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-${{ runner.os }}-yarn-cache-${{ github.ref }}-
            v1-${{ runner.os }}-yarn-cache-
      - name: Restore Electron Cache
        uses: actions/cache@v2
        with:
          path: ~/Library/Caches/electron
          key: v1-${{ runner.os }}-electron-cache-${{ matrix.electron-version }}
          restore-keys: |
            v1-${{ runner.os }}-electron-cache-${{ matrix.electron-version }}
            v1-${{ runner.os }}-electron-cache-
      - name: Restore libcurl deps cache
        uses: actions/cache@v2
        id: libcurl-deps-cache
        with:
          path: |
            ~/.node-gyp
            ~/deps
          key: v4-${{ runner.os }}-libcurl-deps-cache-electron-${{ matrix.electron-version }}
          restore-keys: |
            v4-${{ runner.os }}-libcurl-deps-cache-electron-${{ matrix.electron-version }}
      - name: 'Set GIT_TAG'
        if: startsWith(github.ref, 'refs/tags')
        run: echo "GIT_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: 'Publish Binary'
        run: |
          GIT_COMMIT=${{ github.sha }} GIT_TAG=$GIT_TAG ./scripts/ci/build.sh
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: build-logs
          path: ./logs/
          retention-days: 5

  build-and-release-nwjs:
    runs-on: macos-11
    strategy:
      fail-fast: false
      matrix:
        libcurl-release:
          - 7.73.0
        node:
          - 16
        nwjs-version:
          - 0.52.0
          - 0.51.2
          - 0.49.2
        include:
          - libcurl-release: 7.73.0
            node: 16
            nwjs-version: 0.52.0
            node-libcurl-cpp-std: c++17
          - libcurl-release: 7.73.0
            node: 16
            nwjs-version: 0.51.2
            node-libcurl-cpp-std: c++17
    env:
      LIBCURL_RELEASE: ${{ matrix.libcurl-release }}
      LATEST_LIBCURL_RELEASE: ${{ matrix.libcurl-release }}
      NWJS_VERSION: ${{ matrix.nwjs-version }}
      NODE_LIBCURL_CPP_STD: c++11
    steps:
      - run: echo "NODE_LIBCURL_CPP_STD=${{ matrix.node-libcurl-cpp-std }}" >> $GITHUB_ENV
        if: matrix.node-libcurl-cpp-std
      - name: Checkout
        uses: actions/checkout@main
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - name: Install Needed packages
        run: brew install coreutils wget automake libtool cmake gnu-sed m4
      # not using brew for that one as we need 2.69
      - name: Install autoconf
        run: |
          curl -O -L http://ftpmirror.gnu.org/autoconf/autoconf-2.69.tar.gz
          tar -xzf autoconf-2.69.tar.gz
          cd autoconf-*
          ./configure
          make
          make install
          autoconf --version
          ln -s /usr/local/bin/glibtoolize /usr/local/bin/libtoolize
      - name: Output yarn cache dir
        id: yarn-cache-dir
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Restore Yarn Cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir.outputs.dir }}
          key: v1-${{ runner.os }}-yarn-cache-${{ github.ref }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-${{ runner.os }}-yarn-cache-${{ github.ref }}-
            v1-${{ runner.os }}-yarn-cache-
      - name: Restore libcurl deps cache
        uses: actions/cache@v2
        id: libcurl-deps-cache
        with:
          path: |
            ~/.node-gyp
            ~/deps
          key: v4-${{ runner.os }}-libcurl-deps-cache-nwjs-${{ matrix.nwjs-version }}
          restore-keys: |
            v4-${{ runner.os }}-libcurl-deps-cache-nwjs-${{ matrix.nwjs-version }}
      - name: 'Set GIT_TAG'
        if: startsWith(github.ref, 'refs/tags')
        run: echo "GIT_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: 'Publish Binary'
        run: |
          GIT_COMMIT=${{ github.sha }} GIT_TAG=$GIT_TAG ./scripts/ci/build.sh
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: build-logs
          path: ./logs/
          retention-days: 5
