## GitHub Actions is used to build:
## - Electron (macOs)
## - Nwjs (macOs)
## - Node.js (macOs, linux)

name: build-and-release

on:
  push:
    tags:
      - '*'
    branches:
      - develop

env:
  NODE_LIBCURL_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# all jobs here must have a matrix identical to the ones inside build-lint-test.yaml

jobs:
  build-and-release-nodejs:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-11
          - ubuntu-18.04
        libcurl-release:
          - 7.79.1
        node-libcurl-cpp-std:
          - c++11
        node:
          - 12
          - 14
          - 16
        include:
          - os: macos-11
            node: 16
            node-libcurl-cpp-std: c++17

    env:
      LIBCURL_RELEASE: ${{ matrix.libcurl-release }}
      LATEST_LIBCURL_RELEASE: ${{ matrix.libcurl-release }}
      NODE_LIBCURL_CPP_STD: ${{ matrix.node-libcurl-cpp-std }}
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - if: runner.os == 'macOS'
        name: Install Needed packages on macOS
        run: brew install coreutils wget automake libtool cmake gnu-sed m4
      # not using brew for that one as we need 2.69
      - if: runner.os == 'macOS'
        name: Install autoconf
        run: |
          curl -O -L http://ftpmirror.gnu.org/autoconf/autoconf-2.69.tar.gz
          tar -xzf autoconf-2.69.tar.gz
          cd autoconf-*
          ./configure
          make
          make install
          autoconf --version
          ln -s /usr/local/bin/glibtoolize /usr/local/bin/libtoolize
      - if: runner.os == 'Linux'
        name: Install Needed packages on Linux
        run: sudo apt-get install -y cmake
      - name: Output yarn cache dir
        id: yarn-cache-dir
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Restore Yarn Cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir.outputs.dir }}
          key: v1-${{ runner.os }}-yarn-cache-${{ github.ref }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-${{ runner.os }}-yarn-cache-${{ github.ref }}-
            v1-${{ runner.os }}-yarn-cache-
      - name: Restore libcurl deps cache
        uses: actions/cache@v2
        id: libcurl-deps-cache
        with:
          path: |
            ~/.node-gyp
            ~/deps
          key: v4-${{ runner.os }}-libcurl-deps-cache-node-${{ matrix.node }}-fork
          restore-keys: |
            v4-${{ runner.os }}-libcurl-deps-cache-node-${{ matrix.node }}-fork
      - name: 'Set GIT_TAG'
        if: startsWith(github.ref, 'refs/tags')
        run: echo "GIT_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: 'Publish Binary'
        run: |
          GIT_COMMIT=${{ github.sha }} GIT_TAG=$GIT_TAG ./scripts/ci/build.sh
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: build-logs-${{ matrix.os }}-${{ matrix.libcurl-release }}-${{ matrix.node }}
          path: ./logs/
          retention-days: 5

  build-and-release-electron:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-11
          - ubuntu-18.04
        libcurl-release:
          - 7.79.1
        node:
          - 16
        electron-version:
          - 15.3.7
    env:
      LIBCURL_RELEASE: ${{ matrix.libcurl-release }}
      LATEST_LIBCURL_RELEASE: ${{ matrix.libcurl-release }}
      ELECTRON_VERSION: ${{ matrix.electron-version }}
      NODE_LIBCURL_CPP_STD: c++17
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - if: runner.os == 'macOS'
        name: Install Needed packages
        run: brew install coreutils wget automake libtool cmake gnu-sed m4
      # not using brew for that one as we need 2.69
      - if: runner.os == 'macOS'
        name: Install autoconf
        run: |
          curl -O -L http://ftpmirror.gnu.org/autoconf/autoconf-2.69.tar.gz
          tar -xzf autoconf-2.69.tar.gz
          cd autoconf-*
          ./configure
          make
          make install
          autoconf --version
          ln -s /usr/local/bin/glibtoolize /usr/local/bin/libtoolize
      - if: runner.os == 'Linux'
        name: Install Needed packages on Linux
        run: sudo apt-get install -y cmake
      - name: Output yarn cache dir
        id: yarn-cache-dir
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Restore Yarn Cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir.outputs.dir }}
          key: v1-${{ runner.os }}-yarn-cache-${{ github.ref }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-${{ runner.os }}-yarn-cache-${{ github.ref }}-
            v1-${{ runner.os }}-yarn-cache-
      - name: Restore Electron Cache
        uses: actions/cache@v2
        with:
          path: ~/Library/Caches/electron
          key: v1-${{ runner.os }}-electron-cache-${{ matrix.electron-version }}
          restore-keys: |
            v1-${{ runner.os }}-electron-cache-${{ matrix.electron-version }}
            v1-${{ runner.os }}-electron-cache-
      - name: Restore libcurl deps cache
        uses: actions/cache@v2
        id: libcurl-deps-cache
        with:
          path: |
            ~/.node-gyp
            ~/deps
          key: v4-${{ runner.os }}-libcurl-deps-cache-electron-${{ matrix.electron-version }}-fork
          restore-keys: |
            v4-${{ runner.os }}-libcurl-deps-cache-electron-${{ matrix.electron-version }}-fork
      - name: 'Set GIT_TAG'
        if: startsWith(github.ref, 'refs/tags')
        run: echo "GIT_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: 'Publish Binary'
        run: |
          GIT_COMMIT=${{ github.sha }} GIT_TAG=$GIT_TAG ./scripts/ci/build.sh
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: build-logs-${{ matrix.os }}-${{ matrix.libcurl-release }}-${{ matrix.electron-version }}
          path: ./logs/
          retention-days: 5

  build-and-release-nodejs-windows:
    runs-on: windows-2016
    strategy:
      fail-fast: false
      matrix:
        node:
          - 12
          - 14
          - 16
    env:
      npm_config_msvs_version: 2017
      npm_config_build_from_source: true
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          submodules: recursive
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - name: Install dependencies
        run: |
          cinst nasm -y
          $env:PATH=$env:PROGRAMFILES + "\NASM;" + $env:Path
          python deps\curl-for-windows\configure.py
      - name: Build
        run: |
          $env:PATH=$env:PROGRAMFILES + "\NASM;" + $env:Path
          yarn install --frozen-lockfile
      - name: Test
        run: |
          yarn ts-node -e "console.log(require('./lib').Curl.getVersionInfoString())"
          yarn test

          if ($LASTEXITCODE -eq 0) {
            $host.SetShouldExit(0)
          }
      - name: Publish binary
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          yarn node-pre-gyp package testpackage --verbose
          node scripts\module-packaging.js --publish $(yarn -s node-pre-gyp reveal staged_tarball --silent)

  build-and-release-electron-windows:
    runs-on: windows-2016
    strategy:
      fail-fast: false
      matrix:
        node:
          - 16
        electron-version:
          - 15.3.7
    env:
      ELECTRON_VERSION: ${{ matrix.electron-version }}
      npm_config_msvs_version: 2017
      npm_config_build_from_source: true
      npm_config_runtime: "electron"
      npm_config_dist_url: "https://atom.io/download/electron"
      npm_config_target: ${{ matrix.electron-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          submodules: recursive
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - name: Install dependencies
        run: |
          cinst nasm -y
          $env:PATH=$env:PROGRAMFILES + "\NASM;" + $env:Path
          python deps\curl-for-windows\configure.py
          yarn global add electron@${env:ELECTRON_VERSION}
      - name: Build
        run: |
          $env:PATH=$env:PROGRAMFILES + "\NASM;" + $env:Path
          yarn install --frozen-lockfile
      - name: Test
        run: |
          yarn test:electron

          if ($LASTEXITCODE -eq 0) {
            $host.SetShouldExit(0)
          }
      - name: Publish binary
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          yarn node-pre-gyp package testpackage --verbose
          node scripts\module-packaging.js --publish $(yarn -s node-pre-gyp reveal staged_tarball --silent)
