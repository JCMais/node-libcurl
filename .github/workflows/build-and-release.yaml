## GitHub Actions is used to build:
## - Electron (macOs)
## - Nwjs (macOs)
## - Node.js (macOs, linux)

name: build-and-release

on:
  push:
    tags:
      - '*'
    branches:
      - develop

# all jobs here must have a matrix identical to the ones inside build-lint-test.yaml

jobs:
  scan:
    permissions:
      packages: write
      contents: write # publish sbom to GH releases/tag assets
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: ${{ github.repository }}

      # Perform SCA analysis for the code repository
      # Produces SBOM and CVE report
      # Helps understand vulnerabilities / license compliance across third party dependencies
      # Drift: Doesn't track any npm global or OS specific packages that involves scanning entire root file system.
      # (TODO): Produce OS specific SBOM to detect build time depdencies.
      - id: sca-project
        uses: Kong/public-shared-actions/security-actions/sca@f2b77d6aa619dbe3bfcc1ac4f99af7d02614e90a # v4.1.0
        with:
          dir: ${{ github.repository }}
          upload-sbom-release-assets: true

  setup:
    runs-on: ubuntu-22.04
    outputs:
      NODE_VERSION: ${{ steps.set-versions.outputs.NODE_VERSION }}
      ELECTRON_VERSION: ${{ steps.set-versions.outputs.ELECTRON_VERSION }}
      LIBCURL_RELEASE: ${{ steps.set-versions.outputs.LIBCURL_RELEASE }}
      LATEST_LIBCURL_RELEASE: ${{ steps.set-versions.outputs.LATEST_LIBCURL_RELEASE }}
      NODE_LIBCURL_CPP_STD: ${{ steps.set-versions.outputs.NODE_LIBCURL_CPP_STD }}
      npm_config_target: ${{ steps.set-versions.outputs.npm_config_target }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Read .node-version
        id: set-versions
        run: |
          NODE_VERSION=$(cat .node-version)
          ELECTRON_VERSION=$(cat .electron-version)
          LIBCURL_RELEASE=$(cat .libcurl-version)
          LATEST_LIBCURL_RELEASE=$(cat .libcurl-version)
          NODE_LIBCURL_CPP_STD=c++20
          npm_config_target=$(cat .electron-version)
          echo "NODE_VERSION=$NODE_VERSION" >> $GITHUB_OUTPUT
          echo "ELECTRON_VERSION=$ELECTRON_VERSION" >> $GITHUB_OUTPUT
          echo "LIBCURL_RELEASE=$LIBCURL_RELEASE" >> $GITHUB_OUTPUT
          echo "LATEST_LIBCURL_RELEASE=$LATEST_LIBCURL_RELEASE" >> $GITHUB_OUTPUT
          echo "NODE_LIBCURL_CPP_STD=$NODE_LIBCURL_CPP_STD" >> $GITHUB_OUTPUT
          echo "npm_config_target=$npm_config_target" >> $GITHUB_OUTPUT

  build-and-release-nodejs:
    needs: setup
    permissions: write-all
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-13-xlarge
          - ubuntu-22.04
          - ubuntu-22.04-arm
    env:
      NODE_VERSION: ${{ needs.setup.outputs.NODE_VERSION }}
      LIBCURL_RELEASE: ${{ needs.setup.outputs.LIBCURL_RELEASE }}
      LATEST_LIBCURL_RELEASE: ${{ needs.setup.outputs.LATEST_LIBCURL_RELEASE }}
      NODE_LIBCURL_CPP_STD: ${{ needs.setup.outputs.NODE_LIBCURL_CPP_STD }}
    steps:
      - if: runner.os == 'macOS'
        name: Install Needed packages on macOS
        run: brew install coreutils automake libtool cmake gnu-sed m4 autoconf groff
      - if: runner.os == 'Linux'
        name: Install Needed packages on Linux
        run: sudo apt-get install -y cmake
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.node-version'
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - name: Restore libcurl deps cache
        uses: actions/cache@v4
        id: libcurl-deps-cache
        with:
          path: |
            ~/.node-gyp
            ~/deps
          key: v4-${{ matrix.os }}-libcurl-deps-cache-node-${{ env.NODE_VERSION }}-fork
          restore-keys: |
            v4-${{ matrix.os }}-libcurl-deps-cache-node-${{ env.NODE_VERSION }}-fork
      - name: 'Set GIT_TAG'
        if: startsWith(github.ref, 'refs/tags')
        run: echo "GIT_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: 'Publish Binary'
        run: |
          pip install packaging
          GIT_COMMIT=${{ github.sha }} \
          GIT_TAG=$GIT_TAG \
          RUNNER_OS=${{ matrix.os }} \
          ./scripts/ci/build.sh
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.os }}-${{ env.LIBCURL_RELEASE }}-${{ env.NODE_VERSION }}
          path: ./logs/
          retention-days: 5

  build-and-release-electron:
    needs: setup
    permissions: write-all
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-13-xlarge
          - ubuntu-22.04
          - ubuntu-22.04-arm
    env:
      NODE_VERSION: ${{ needs.setup.outputs.NODE_VERSION }}
      ELECTRON_VERSION: ${{ needs.setup.outputs.ELECTRON_VERSION }}
      LIBCURL_RELEASE: ${{ needs.setup.outputs.LIBCURL_RELEASE }}
      LATEST_LIBCURL_RELEASE: ${{ needs.setup.outputs.LATEST_LIBCURL_RELEASE }}
      NODE_LIBCURL_CPP_STD: ${{ needs.setup.outputs.NODE_LIBCURL_CPP_STD }}
    steps:
      - if: runner.os == 'macOS'
        name: Install Needed packages
        run: brew install coreutils automake libtool cmake gnu-sed m4 autoconf groff
      - if: runner.os == 'Linux'
        name: Install Needed packages on Linux
        run: sudo apt-get install -y cmake
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version-file: '.node-version'
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - name: Restore Electron Cache
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/electron
          key: v1-${{ matrix.os }}-electron-cache-${{ env.ELECTRON_VERSION }} }}
          restore-keys: |
            v1-${{ matrix.os }}-electron-cache-${{ env.ELECTRON_VERSION }} }}
            v1-${{ matrix.os }}-electron-cache-
      - name: Restore libcurl deps cache
        uses: actions/cache@v4
        id: libcurl-deps-cache
        with:
          path: |
            ~/.node-gyp
            ~/deps
          key: v4-${{ matrix.os }}-libcurl-deps-cache-electron-${{ env.ELECTRON_VERSION }} }}-fork
          restore-keys: |
            v4-${{ matrix.os }}-libcurl-deps-cache-electron-${{ env.ELECTRON_VERSION }} }}-fork
      - name: 'Set GIT_TAG'
        if: startsWith(github.ref, 'refs/tags')
        run: echo "GIT_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: 'Publish Binary'
        run: |
          pip install packaging
          GIT_COMMIT=${{ github.sha }} \
          GIT_TAG=$GIT_TAG \
          ./scripts/ci/build.sh
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.os }}-${{ env.LIBCURL_RELEASE }}-${{ env.ELECTRON_VERSION }} }}
          path: ./logs/
          retention-days: 5

  build-and-release-nodejs-windows:
    needs: setup
    permissions: write-all
    runs-on: windows-latest
    env:
      npm_config_msvs_version: 2022
      npm_config_build_from_source: true
      NODE_VERSION: ${{ needs.setup.outputs.NODE_VERSION }}
      LIBCURL_RELEASE: ${{ needs.setup.outputs.LIBCURL_RELEASE }}
      LATEST_LIBCURL_RELEASE: ${{ needs.setup.outputs.LATEST_LIBCURL_RELEASE }}
      NODE_LIBCURL_CPP_STD: ${{ needs.setup.outputs.NODE_LIBCURL_CPP_STD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install dependencies
        run: |
          choco install nasm -y
          $env:PATH=$env:PROGRAMFILES + "\NASM;" + $env:Path
          python deps\curl-for-windows\configure.py
      - name: Build
        run: |
          $env:PATH=$env:PROGRAMFILES + "\NASM;" + $env:Path
          npm ci
      - name: Test
        run: |
          npm run ts-node -e "console.log(require('./lib').Curl.getVersionInfoString())"
          npm run test

          if ($LASTEXITCODE -eq 0) {
            $host.SetShouldExit(0)
          }
      - name: Publish binary
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          pip install packaging
          npm run pregyp package testpackage --verbose
          node scripts\module-packaging.js --publish $(npm run -s pregyp reveal staged_tarball --silent)

  build-and-release-electron-windows:
    needs: setup
    permissions: write-all
    runs-on: windows-latest
    env:
      npm_config_msvs_version: 2022
      npm_config_build_from_source: true
      npm_config_runtime: 'electron'
      npm_config_dist_url: 'https://electronjs.org/headers'
      npm_config_target: ${{ needs.setup.outputs.npm_config_target }}
      NODE_VERSION: ${{ needs.setup.outputs.NODE_VERSION }}
      ELECTRON_VERSION: ${{ needs.setup.outputs.ELECTRON_VERSION }}
      LIBCURL_RELEASE: ${{ needs.setup.outputs.LIBCURL_RELEASE }}
      LATEST_LIBCURL_RELEASE: ${{ needs.setup.outputs.LATEST_LIBCURL_RELEASE }}
      NODE_LIBCURL_CPP_STD: ${{ needs.setup.outputs.NODE_LIBCURL_CPP_STD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install dependencies
        run: |
          choco install nasm -y
          $env:PATH=$env:PROGRAMFILES + "\NASM;" + $env:Path
          python deps\curl-for-windows\configure.py
          npm i -g electron@${env:ELECTRON_VERSION}
      - name: Build
        run: |
          $env:PATH=$env:PROGRAMFILES + "\NASM;" + $env:Path
          npm ci
      - name: Test
        run: |
          npm run test:electron

          if ($LASTEXITCODE -eq 0) {
            $host.SetShouldExit(0)
          }
      - name: Publish binary
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          pip install packaging
          npm run pregyp package testpackage --verbose
          node scripts\module-packaging.js --publish $(npm run -s pregyp reveal staged_tarball --silent)
